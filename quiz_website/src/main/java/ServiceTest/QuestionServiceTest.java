package ServiceTest;

import Dao.QuestionDAO;
import model.Question;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import service.QuestionService;

import java.util.Arrays;
import java.util.Collections;

import static org.junit.jupiter.api.Assertions.*;

public class QuestionServiceTest {

    private QuestionDAO questionDAO;
    private QuestionService questionService;

    @BeforeEach
    public void setup() {
        questionDAO = new QuestionDAO();  // Assuming you set up a test database connection in the constructor
        questionService = new QuestionService(questionDAO);
    }

    @AfterEach
    public void tearDown() {
        questionDAO.clearQuestionsTable();  // This should remove all entries from the questions table
    }

    @Test
    public void testCreateAndGetQuestion() {
        Question sampleQuestion = new Question(null, 2L, "Sample Question", Collections.singletonList("Option1"), "Option1");

        // Creating the question
        assertTrue(questionService.createQuestion(sampleQuestion));

        // Retrieving the question
        Question retrievedQuestion = questionService.getQuestionById(sampleQuestion.getQuestionId());

        assertEquals(sampleQuestion.getContent(), retrievedQuestion.getContent());
        assertEquals(sampleQuestion.getOptions(), retrievedQuestion.getOptions());
        assertEquals(sampleQuestion.getCorrectAnswer(), retrievedQuestion.getCorrectAnswer());
    }

    @Test
    public void testGetQuestionById() {
        //IMPORTANT when creating with id, id generated by db is set
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Collections.singletonList("Option1"), "Option1");
        questionDAO.createQuestion(sampleQuestion);

        //IMPORTNAT
        Question retrievedQuestion = questionService.getQuestionById(sampleQuestion.getQuestionId());

        assertNotNull(retrievedQuestion, "Retrieved question should not be null");

        assertEquals(sampleQuestion.getContent(), retrievedQuestion.getContent());
        assertEquals(sampleQuestion.getCorrectAnswer(), retrievedQuestion.getCorrectAnswer());
    }

    @Test
    public void testCreateQuestion() {
        Question sampleQuestion = new Question(null, 2L, "Sample Question", Collections.singletonList("Option1"), "Option1");
        assertTrue(questionService.createQuestion(sampleQuestion));
        assertNotNull(questionService.getQuestionById(sampleQuestion.getQuestionId()));
    }
    @Test
    public void testUpdateQuestion() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Collections.singletonList("Option1"), "Option1");
        questionDAO.createQuestion(sampleQuestion);

        sampleQuestion.setContent("Updated Content");
        assertTrue(questionService.updateQuestion(sampleQuestion));

        Question updatedQuestion = questionService.getQuestionById(sampleQuestion.getQuestionId());
        assertEquals("Updated Content", updatedQuestion.getContent());
    }
    @Test
    public void testAwardPoints() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Collections.singletonList("Option1"), "Option1");
        assertEquals(1, questionService.awardPoints(sampleQuestion, "Option1"));
        assertEquals(0, questionService.awardPoints(sampleQuestion, "WrongOption"));
    }
    @Test
    public void testValidateQuestionEmptyContent() {
        Question invalidQuestion = new Question(null, 2L, "   ", Collections.singletonList("Option1"), "Option1");
        assertThrows(IllegalArgumentException.class, () -> questionService.createQuestion(invalidQuestion));
    }

    @Test
    public void testValidateQuestionInvalidOption() {
        Question invalidQuestion = new Question(null, 2L, "Sample Question", Arrays.asList("Option1", ""), "Option1");
        assertThrows(IllegalArgumentException.class, () -> questionService.createQuestion(invalidQuestion));
    }

    @Test
    public void testGetAllQuestionsForQuiz() {
        Question q1 = new Question(null, 2L, "Q1", Arrays.asList("Option1"), "Option1");
        Question q2 = new Question(null, 2L, "Q2", Arrays.asList("Option2"), "Option2");
        questionDAO.createQuestion(q1);
        questionDAO.createQuestion(q2);

        assertEquals(2, questionService.getAllQuestionsForQuiz(2L).size());
    }

    @Test
    public void testDeleteQuestion() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Arrays.asList("Option1"), "Option1");
        questionDAO.createQuestion(sampleQuestion);

        assertTrue(questionService.deleteQuestion(sampleQuestion.getQuestionId()));
        assertNull(questionService.getQuestionById(sampleQuestion.getQuestionId()));
    }

    @Test
    public void testGetRandomizedOptionOrder() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question",
                Arrays.asList("Option1", "Option2", "Option3", "Option4"), "Option1");

        Question randomizedQuestion = questionService.getRandomizedOptionOrder(sampleQuestion);

        assertEquals(sampleQuestion.getQuestionId(), randomizedQuestion.getQuestionId());

        // Check that the options are shuffled
        int equalCount = 0;
        for (int i = 0; i < 10; i++) {  // Shuffle and check multiple times
            randomizedQuestion = questionService.getRandomizedOptionOrder(sampleQuestion);
            if (sampleQuestion.getOptions().equals(randomizedQuestion.getOptions())) {
                equalCount++;
            }
        }

        // Let's say, if the options are the same for more than 3 times out of 10, then our test fails
        assertTrue(equalCount <= 3, "Options were not randomized effectively");
    }


    @Test
    public void testIsAnswerCorrect() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Arrays.asList("Option1"), "Option1");
        assertTrue(questionService.isAnswerCorrect(sampleQuestion, "Option1"));
        assertFalse(questionService.isAnswerCorrect(sampleQuestion, "WrongOption"));
    }

    @Test
    public void testFetchOptionsForQuestion() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Arrays.asList("Option1", "Option2"), "Option1");
        questionDAO.createQuestion(sampleQuestion);

        //questionDAO.createOptionsForQuestion(sampleQuestion.getQuestionId(), Arrays.asList("Option1", "Option2"));

        assertEquals(2, questionService.fetchOptionsForQuestion(sampleQuestion.getQuestionId()).size());

        Question sampleQuestion2 = new Question(1L, 2L, "Sample Question2", Arrays.asList("Option1", "Option2"), "Option1");
        questionDAO.createQuestion(sampleQuestion2);

        questionDAO.createOptionsForQuestion(sampleQuestion2.getQuestionId(), Arrays.asList("Option3", "Option4"));

        assertEquals(4, questionService.fetchOptionsForQuestion(sampleQuestion2.getQuestionId()).size());
    }

    @Test
    public void testModifyOptionsForQuestion() {
        Question sampleQuestion = new Question(1L, 2L, "Sample Question", Arrays.asList("Option1", "Option2"), "Option1");
        questionDAO.createQuestion(sampleQuestion);

        assertTrue(questionService.modifyOptionsForQuestion(sampleQuestion.getQuestionId(), Arrays.asList("Option3", "Option4")));
    }

}
